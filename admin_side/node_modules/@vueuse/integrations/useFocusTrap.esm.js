import { unref, ref, watch } from 'vue-demi';
import { tryOnUnmounted } from '@vueuse/shared';
import { createFocusTrap } from 'focus-trap';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

/**
 * Get the dom element of a ref of element or Vue component instance
 *
 * @param elRef
 */
function unrefElement(elRef) {
    var _a, _b;
    const plain = unref(elRef);
    return (_b = (_a = plain) === null || _a === void 0 ? void 0 : _a.$el) !== null && _b !== void 0 ? _b : plain;
}

var SwipeDirection;
(function (SwipeDirection) {
    SwipeDirection["UP"] = "UP";
    SwipeDirection["RIGHT"] = "RIGHT";
    SwipeDirection["DOWN"] = "DOWN";
    SwipeDirection["LEFT"] = "LEFT";
    SwipeDirection["NONE"] = "NONE";
})(SwipeDirection || (SwipeDirection = {}));

/**
 * Reactive focus-trap
 *
 * @see https://vueuse.org/useFocusTrap
 * @param target The target element to trap focus within
 * @param options Focus trap options
 * @param autoFocus Focus trap automatically when mounted
 */
function useFocusTrap(target, options = {}) {
    let trap;
    const { immediate } = options, focusTrapOptions = __rest(options, ["immediate"]);
    const hasFocus = ref(false);
    const isPaused = ref(false);
    const activate = (opts) => trap && trap.activate(opts);
    const deactivate = (opts) => trap && trap.deactivate(opts);
    const pause = () => {
        if (trap) {
            trap.pause();
            isPaused.value = true;
        }
    };
    const unpause = () => {
        if (trap) {
            trap.unpause();
            isPaused.value = false;
        }
    };
    watch(() => unrefElement(target), (el) => {
        trap = createFocusTrap(el, Object.assign(Object.assign({}, focusTrapOptions), { onActivate() {
                hasFocus.value = true;
                // Apply if user provided onActivate option
                if (options.onActivate)
                    options.onActivate();
            },
            onDeactivate() {
                hasFocus.value = false;
                // Apply if user provided onDeactivate option
                if (options.onDeactivate)
                    options.onDeactivate();
            } }));
        // Focus if immediate is set to true
        if (immediate)
            activate();
    }, { flush: 'post' });
    // Cleanup on unmount
    tryOnUnmounted(() => deactivate());
    return {
        hasFocus,
        isPaused,
        activate,
        deactivate,
        pause,
        unpause,
    };
}

export { useFocusTrap };
