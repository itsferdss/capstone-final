'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vueDemi = require('vue-demi');
var axios = require('axios');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

/**
 * Wrapper for axios.
 *
 * @see https://vueuse.org/useAxios
 * @param url
 * @param config
 */
function useAxios(url, ...args) {
    let config = {};
    let instance = axios__default['default'];
    if (args.length > 0) {
        /**
         * Unable to use `instanceof` here becuase of (https://github.com/axios/axios/issues/737)
         * so instead we are checking if there is a `requset` on the object to see if it is an
         * axios instance
         */
        if ('request' in args[0])
            instance = args[0];
        else
            config = args[0];
    }
    if (args.length > 1) {
        if ('request' in args[1])
            instance = args[1];
    }
    const response = vueDemi.shallowRef();
    const data = vueDemi.shallowRef();
    const isFinished = vueDemi.ref(false);
    const isLoading = vueDemi.ref(true);
    const aborted = vueDemi.ref(false);
    const error = vueDemi.shallowRef();
    const cancelToken = axios__default['default'].CancelToken.source();
    const abort = (message) => {
        if (isFinished.value || !isLoading.value)
            return;
        cancelToken.cancel(message);
        aborted.value = true;
        isLoading.value = false;
        isFinished.value = false;
    };
    instance(url, Object.assign(Object.assign({}, config), { cancelToken: cancelToken.token }))
        .then((r) => {
        response.value = r;
        data.value = r.data;
    })
        .catch((e) => {
        error.value = e;
    })
        .finally(() => {
        isLoading.value = false;
        isFinished.value = true;
    });
    return {
        response,
        data,
        error,
        finished: isFinished,
        loading: isLoading,
        isFinished,
        isLoading,
        cancel: abort,
        canceled: aborted,
        aborted,
        abort,
    };
}

exports.useAxios = useAxios;
