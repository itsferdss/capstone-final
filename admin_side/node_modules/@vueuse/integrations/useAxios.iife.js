;(function (window) {
  if (window.VueDemi) {
    return
  }
  var VueDemi = {}
  var Vue = window.Vue
  if (Vue) {
    if (Vue.version.slice(0, 2) === '2.') {
      var VueCompositionAPI = window.VueCompositionAPI
      if (VueCompositionAPI) {
        for (var key in VueCompositionAPI) {
          VueDemi[key] = VueCompositionAPI[key]
        }
        VueDemi.isVue2 = true
        VueDemi.isVue3 = false
        VueDemi.install = function (){}
        VueDemi.Vue = Vue
        VueDemi.Vue2 = Vue
        VueDemi.version = Vue.version
      } else {
        console.error(
          '[vue-demi] no VueCompositionAPI instance found, please be sure to import `@vue/composition-api` before `vue-demi`.'
        )
      }
    } else if (Vue.version.slice(0, 2) === '3.') {
      for (var key in Vue) {
        VueDemi[key] = Vue[key]
      }
      VueDemi.isVue2 = false
      VueDemi.isVue3 = true
      VueDemi.install = function (){}
      VueDemi.Vue = Vue
      VueDemi.Vue2 = undefined
      VueDemi.version = Vue.version
      VueDemi.set = function(target, key, val) {
        if (Array.isArray(target)) {
          target.length = Math.max(target.length, key)
          target.splice(key, 1, val)
          return val
        }
        target[key] = val
        return val
      }
      VueDemi.del = function(target, key) {
        if (Array.isArray(target)) {
          target.splice(key, 1)
          return
        }
        delete target[key]
      }
    } else {
      console.error('[vue-demi] Vue version ' + Vue.version + ' is unsupported.')
    }
  } else {
    console.error(
      '[vue-demi] no Vue instance found, please be sure to import `vue` before `vue-demi`.'
    )
  }
  window.VueDemi = VueDemi
})(window)
;
;(function (exports, vueDemi, axios) {
  'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

  /**
   * Wrapper for axios.
   *
   * @see https://vueuse.org/useAxios
   * @param url
   * @param config
   */
  function useAxios(url, ...args) {
      let config = {};
      let instance = axios__default['default'];
      if (args.length > 0) {
          /**
           * Unable to use `instanceof` here becuase of (https://github.com/axios/axios/issues/737)
           * so instead we are checking if there is a `requset` on the object to see if it is an
           * axios instance
           */
          if ('request' in args[0])
              instance = args[0];
          else
              config = args[0];
      }
      if (args.length > 1) {
          if ('request' in args[1])
              instance = args[1];
      }
      const response = vueDemi.shallowRef();
      const data = vueDemi.shallowRef();
      const isFinished = vueDemi.ref(false);
      const isLoading = vueDemi.ref(true);
      const aborted = vueDemi.ref(false);
      const error = vueDemi.shallowRef();
      const cancelToken = axios__default['default'].CancelToken.source();
      const abort = (message) => {
          if (isFinished.value || !isLoading.value)
              return;
          cancelToken.cancel(message);
          aborted.value = true;
          isLoading.value = false;
          isFinished.value = false;
      };
      instance(url, Object.assign(Object.assign({}, config), { cancelToken: cancelToken.token }))
          .then((r) => {
          response.value = r;
          data.value = r.data;
      })
          .catch((e) => {
          error.value = e;
      })
          .finally(() => {
          isLoading.value = false;
          isFinished.value = true;
      });
      return {
          response,
          data,
          error,
          finished: isFinished,
          loading: isLoading,
          isFinished,
          isLoading,
          cancel: abort,
          canceled: aborted,
          aborted,
          abort,
      };
  }

  exports.useAxios = useAxios;

  Object.defineProperty(exports, '__esModule', { value: true });

}(this.VueUse = this.VueUse || {}, VueDemi, axios));
