'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vueDemi = require('vue-demi');
var axios = require('axios');
var shared = require('@vueuse/shared');
var Cookie = require('universal-cookie');
var focusTrap = require('focus-trap');
var jwt_decode = require('jwt-decode');
var nprogress = require('nprogress');
var QRCode = require('qrcode');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);
var Cookie__default = /*#__PURE__*/_interopDefaultLegacy(Cookie);
var jwt_decode__default = /*#__PURE__*/_interopDefaultLegacy(jwt_decode);
var nprogress__default = /*#__PURE__*/_interopDefaultLegacy(nprogress);
var QRCode__default = /*#__PURE__*/_interopDefaultLegacy(QRCode);

/**
 * Wrapper for axios.
 *
 * @see https://vueuse.org/useAxios
 * @param url
 * @param config
 */
function useAxios(url, ...args) {
    let config = {};
    let instance = axios__default['default'];
    if (args.length > 0) {
        /**
         * Unable to use `instanceof` here becuase of (https://github.com/axios/axios/issues/737)
         * so instead we are checking if there is a `requset` on the object to see if it is an
         * axios instance
         */
        if ('request' in args[0])
            instance = args[0];
        else
            config = args[0];
    }
    if (args.length > 1) {
        if ('request' in args[1])
            instance = args[1];
    }
    const response = vueDemi.shallowRef();
    const data = vueDemi.shallowRef();
    const isFinished = vueDemi.ref(false);
    const isLoading = vueDemi.ref(true);
    const aborted = vueDemi.ref(false);
    const error = vueDemi.shallowRef();
    const cancelToken = axios__default['default'].CancelToken.source();
    const abort = (message) => {
        if (isFinished.value || !isLoading.value)
            return;
        cancelToken.cancel(message);
        aborted.value = true;
        isLoading.value = false;
        isFinished.value = false;
    };
    instance(url, Object.assign(Object.assign({}, config), { cancelToken: cancelToken.token }))
        .then((r) => {
        response.value = r;
        data.value = r.data;
    })
        .catch((e) => {
        error.value = e;
    })
        .finally(() => {
        isLoading.value = false;
        isFinished.value = true;
    });
    return {
        response,
        data,
        error,
        finished: isFinished,
        loading: isLoading,
        isFinished,
        isLoading,
        cancel: abort,
        canceled: aborted,
        aborted,
        abort,
    };
}

/**
 * Creates a new {@link useCookies} function
 * @param {Object} req - incoming http request (for SSR)
 * @see https://github.com/reactivestack/cookies/tree/master/packages/universal-cookie universal-cookie
 * @description Creates universal-cookie instance using request (default is window.document.cookie) and returns {@link useCookies} function with provided universal-cookie instance
 */
function createCookies(req) {
    const universalCookie = new Cookie__default['default'](req ? req.headers.cookie : null);
    return (dependencies, { doNotParse = false, autoUpdateDependencies = false } = {}) => useCookies(dependencies, { doNotParse, autoUpdateDependencies }, universalCookie);
}
/**
 * Reactive methods to work with cookies (use {@link createCookies} method instead if you are using SSR)
 * @param {string[]|null|undefined} dependencies - array of watching cookie's names. Pass empty array if don't want to watch cookies changes.
 * @param {Object} options
 * @param {boolean} options.doNotParse - don't try parse value as JSON
 * @param {boolean} options.autoUpdateDependencies - automatically update watching dependencies
 * @param {Object} cookies - universal-cookie instance
 */
function useCookies(dependencies, { doNotParse = false, autoUpdateDependencies = false } = {}, cookies = new Cookie__default['default']()) {
    const watchingDependencies = autoUpdateDependencies ? [...dependencies || []] : dependencies;
    let previousCookies = cookies.getAll({ doNotParse: true });
    /**
     * Adds reactivity to get/getAll methods
     */
    const touches = vueDemi.ref(0);
    const onChange = () => {
        const newCookies = cookies.getAll({ doNotParse: true });
        if (shouldUpdate(watchingDependencies || null, newCookies, previousCookies))
            touches.value++;
        previousCookies = newCookies;
    };
    shared.tryOnMounted(() => {
        cookies.addChangeListener(onChange);
    });
    shared.tryOnUnmounted(() => {
        cookies.removeChangeListener(onChange);
    });
    return {
        /**
         * Reactive get cookie by name. If **autoUpdateDependencies = true** then it will update watching dependencies
         */
        get: (...args) => {
            /**
             * Auto update watching dependencies if needed
             */
            if (autoUpdateDependencies && watchingDependencies && !watchingDependencies.includes(args[0]))
                watchingDependencies.push(args[0]);
            // eslint-disable-next-line no-unused-expressions
            touches.value; // adds reactivity to method
            return cookies.get(args[0], Object.assign({ doNotParse }, args[1]));
        },
        /**
         * Reactive get all cookies
         */
        getAll: (...args) => {
            // eslint-disable-next-line no-unused-expressions
            touches.value; // adds reactivity to method
            return cookies.getAll(Object.assign({ doNotParse }, args[0]));
        },
        set: (...args) => cookies.set(...args),
        remove: (...args) => cookies.remove(...args),
        addChangeListener: (...args) => cookies.addChangeListener(...args),
        removeChangeListener: (...args) => cookies.removeChangeListener(...args),
    };
}
function shouldUpdate(dependencies, newCookies, oldCookies) {
    if (!dependencies)
        return true;
    for (const dependency of dependencies) {
        if (newCookies[dependency] !== oldCookies[dependency])
            return true;
    }
    return false;
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

/**
 * Get the dom element of a ref of element or Vue component instance
 *
 * @param elRef
 */
function unrefElement(elRef) {
    var _a, _b;
    const plain = vueDemi.unref(elRef);
    return (_b = (_a = plain) === null || _a === void 0 ? void 0 : _a.$el) !== null && _b !== void 0 ? _b : plain;
}

var SwipeDirection;
(function (SwipeDirection) {
    SwipeDirection["UP"] = "UP";
    SwipeDirection["RIGHT"] = "RIGHT";
    SwipeDirection["DOWN"] = "DOWN";
    SwipeDirection["LEFT"] = "LEFT";
    SwipeDirection["NONE"] = "NONE";
})(SwipeDirection || (SwipeDirection = {}));

/**
 * Reactive focus-trap
 *
 * @see https://vueuse.org/useFocusTrap
 * @param target The target element to trap focus within
 * @param options Focus trap options
 * @param autoFocus Focus trap automatically when mounted
 */
function useFocusTrap(target, options = {}) {
    let trap;
    const { immediate } = options, focusTrapOptions = __rest(options, ["immediate"]);
    const hasFocus = vueDemi.ref(false);
    const isPaused = vueDemi.ref(false);
    const activate = (opts) => trap && trap.activate(opts);
    const deactivate = (opts) => trap && trap.deactivate(opts);
    const pause = () => {
        if (trap) {
            trap.pause();
            isPaused.value = true;
        }
    };
    const unpause = () => {
        if (trap) {
            trap.unpause();
            isPaused.value = false;
        }
    };
    vueDemi.watch(() => unrefElement(target), (el) => {
        trap = focusTrap.createFocusTrap(el, Object.assign(Object.assign({}, focusTrapOptions), { onActivate() {
                hasFocus.value = true;
                // Apply if user provided onActivate option
                if (options.onActivate)
                    options.onActivate();
            },
            onDeactivate() {
                hasFocus.value = false;
                // Apply if user provided onDeactivate option
                if (options.onDeactivate)
                    options.onDeactivate();
            } }));
        // Focus if immediate is set to true
        if (immediate)
            activate();
    }, { flush: 'post' });
    // Cleanup on unmount
    shared.tryOnUnmounted(() => deactivate());
    return {
        hasFocus,
        isPaused,
        activate,
        deactivate,
        pause,
        unpause,
    };
}

/**
 * Reactive decoded jwt token.
 *
 * @see https://vueuse.org/useJwt
 * @param jwt
 */
function useJwt(encodedJwt, options = {}) {
    const encodedJwtRef = vueDemi.ref(encodedJwt);
    const { onError, fallbackValue = null, } = options;
    const decodeWithFallback = (encodedJwt, options) => {
        try {
            return jwt_decode__default['default'](encodedJwt, options);
        }
        catch (err) {
            onError === null || onError === void 0 ? void 0 : onError(err);
            return fallbackValue;
        }
    };
    const header = vueDemi.computed(() => decodeWithFallback(encodedJwtRef.value, { header: true }));
    const payload = vueDemi.computed(() => decodeWithFallback(encodedJwtRef.value));
    return {
        header,
        payload,
    };
}

/**
 * Reactive progress bar.
 *
 * @see https://vueuse.org/useNProgress
 * @param currentProgress
 * @param options
 */
function useNProgress(currentProgress = null, options) {
    const progress = vueDemi.isRef(currentProgress)
        ? currentProgress
        : vueDemi.ref(currentProgress);
    const isLoading = vueDemi.computed({
        set: load => load ? nprogress__default['default'].start() : nprogress__default['default'].done(),
        get: () => shared.isNumber(progress.value) && progress.value < 1,
    });
    if (options)
        nprogress__default['default'].configure(options);
    const setProgress = nprogress__default['default'].set;
    nprogress__default['default'].set = (n) => {
        progress.value = n;
        return setProgress.call(nprogress__default['default'], n);
    };
    vueDemi.watchEffect(() => {
        if (shared.isNumber(progress.value))
            setProgress.call(nprogress__default['default'], progress.value);
    });
    shared.tryOnUnmounted(nprogress__default['default'].remove);
    return {
        isLoading,
        progress,
        start: nprogress__default['default'].start,
        done: nprogress__default['default'].done,
        remove: () => {
            progress.value = null;
            nprogress__default['default'].remove();
        },
    };
}

/**
 * Wrapper for qrcode.
 *
 * @see https://vueuse.org/useQRCode
 * @param text
 * @param options
 */
function useQRCode(text, options) {
    const src = vueDemi.ref(text);
    const result = vueDemi.ref('');
    vueDemi.watch(src, async (value) => {
        if (src.value && shared.isClient)
            result.value = await QRCode__default['default'].toDataURL(value, options);
    }, { immediate: true });
    return result;
}

exports.createCookies = createCookies;
exports.useAxios = useAxios;
exports.useCookies = useCookies;
exports.useFocusTrap = useFocusTrap;
exports.useJwt = useJwt;
exports.useNProgress = useNProgress;
exports.useQRCode = useQRCode;
