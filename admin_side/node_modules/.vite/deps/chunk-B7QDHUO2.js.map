{
  "version": 3,
  "sources": ["../../vuetify/src/components/VMenu/VMenu.tsx"],
  "sourcesContent": ["// Styles\nimport './VMenu.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\n\n// Utilities\nimport { computed, inject, mergeProps, nextTick, provide, ref, shallowRef, watch } from 'vue'\nimport { VMenuSymbol } from './shared'\nimport {\n  focusableChildren,\n  focusChild,\n  genericComponent,\n  getNextElement,\n  getUid,\n  isClickInsideElement,\n  omit,\n  propsFactory,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { Component } from 'vue'\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const makeVMenuProps = propsFactory({\n  // TODO\n  // disableKeys: Boolean,\n  id: String,\n\n  ...omit(makeVOverlayProps({\n    closeDelay: 250,\n    closeOnContentClick: true,\n    locationStrategy: 'connected' as const,\n    openDelay: 300,\n    scrim: false,\n    scrollStrategy: 'reposition' as const,\n    transition: { component: VDialogTransition as Component },\n  }), ['absolute']),\n}, 'VMenu')\n\nexport const VMenu = genericComponent<OverlaySlots>()({\n  name: 'VMenu',\n\n  props: makeVMenuProps(),\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-menu-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const parent = inject(VMenuSymbol, null)\n    const openChildren = shallowRef(0)\n    provide(VMenuSymbol, {\n      register () {\n        ++openChildren.value\n      },\n      unregister () {\n        --openChildren.value\n      },\n      closeParents (e) {\n        setTimeout(() => {\n          if (!openChildren.value &&\n            (e == null || (e && !isClickInsideElement(e, overlay.value!.contentEl!)))\n          ) {\n            isActive.value = false\n            parent?.closeParents()\n          }\n        }, 40)\n      },\n    })\n\n    async function onFocusIn (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      await nextTick()\n\n      if (\n        isActive.value &&\n        before !== after &&\n        overlay.value?.contentEl &&\n        // We're the topmost menu\n        overlay.value?.globalTop &&\n        // It isn't the document or the menu body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the menu body\n        !overlay.value.contentEl.contains(after)\n      ) {\n        const focusable = focusableChildren(overlay.value.contentEl)\n        focusable[0]?.focus()\n      }\n    }\n\n    watch(isActive, val => {\n      if (val) {\n        parent?.register()\n        document.addEventListener('focusin', onFocusIn, { once: true })\n      } else {\n        parent?.unregister()\n        document.removeEventListener('focusin', onFocusIn)\n      }\n    })\n\n    function onClickOutside (e: MouseEvent) {\n      parent?.closeParents(e)\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      if (props.disabled) return\n\n      if (e.key === 'Tab' || (e.key === 'Enter' && !props.closeOnContentClick)) {\n        if (e.key === 'Enter') e.preventDefault()\n\n        const nextElement = getNextElement(\n          focusableChildren(overlay.value?.contentEl as Element, false),\n          e.shiftKey ? 'prev' : 'next',\n          (el: HTMLElement) => el.tabIndex >= 0\n        )\n        if (!nextElement) {\n          isActive.value = false\n          overlay.value?.activatorEl?.focus()\n        }\n      } else if (['Enter', ' '].includes(e.key) && props.closeOnContentClick) {\n        isActive.value = false\n        parent?.closeParents()\n      }\n    }\n\n    function onActivatorKeydown (e: KeyboardEvent) {\n      if (props.disabled) return\n\n      const el = overlay.value?.contentEl\n      if (el && isActive.value) {\n        if (e.key === 'ArrowDown') {\n          e.preventDefault()\n          focusChild(el, 'next')\n        } else if (e.key === 'ArrowUp') {\n          e.preventDefault()\n          focusChild(el, 'prev')\n        }\n      } else if (['ArrowDown', 'ArrowUp'].includes(e.key)) {\n        isActive.value = true\n        e.preventDefault()\n        setTimeout(() => setTimeout(() => onActivatorKeydown(e)))\n      }\n    }\n\n    const activatorProps = computed(() =>\n      mergeProps({\n        'aria-haspopup': 'menu',\n        'aria-expanded': String(isActive.value),\n        'aria-owns': id.value,\n        onKeydown: onActivatorKeydown,\n      }, props.activatorProps)\n    )\n\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          id={ id.value }\n          class={[\n            'v-menu',\n            props.class,\n          ]}\n          style={ props.style }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          absolute\n          activatorProps={ activatorProps.value }\n          onClick:outside={ onClickOutside }\n          onKeydown={ onKeydown }\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => (\n              <VDefaultsProvider root=\"VMenu\">\n                { slots.default?.(...args) }\n              </VDefaultsProvider>\n            ),\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({ id, Î¨openChildren: openChildren }, overlay)\n  },\n})\n\nexport type VMenu = InstanceType<typeof VMenu>\n"],
  "mappings": "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",
  "names": ["makeVMenuProps", "propsFactory", "id", "String", "omit", "makeVOverlayProps", "closeDelay", "closeOnContentClick", "locationStrategy", "openDelay", "scrim", "scrollStrategy", "transition", "component", "VDialogTransition", "VMenu", "genericComponent", "name", "props", "emits", "value", "setup", "_ref", "slots", "isActive", "useProxiedModel", "scopeId", "useScopeId", "uid", "getUid", "computed", "overlay", "ref", "parent", "inject", "VMenuSymbol", "openChildren", "shallowRef", "provide", "register", "unregister", "closeParents", "e", "setTimeout", "isClickInsideElement", "contentEl", "onFocusIn", "before", "relatedTarget", "after", "target", "nextTick", "globalTop", "document", "includes", "contains", "focusable", "focusableChildren", "focus", "watch", "val", "addEventListener", "once", "removeEventListener", "onClickOutside", "onKeydown", "disabled", "key", "preventDefault", "nextElement", "getNextElement", "shiftKey", "el", "tabIndex", "activatorEl", "onActivatorKeydown", "focusChild", "activatorProps", "mergeProps", "useRender", "overlayProps", "VOverlay", "filterProps", "_createVNode", "_mergeProps", "class", "style", "$event", "activator", "default", "_len", "arguments", "length", "args", "Array", "_key", "VDefaultsProvider", "forwardRefs", "Î¨openChildren"]
}
